import java.io.*;
import java.util.Vector;
import java.util.Arrays;
public class TextManipulator {
    public static void main(String[] args) {
        String text = "This is a test of the Plain+Simple TextManipulator" +
                        "\n this is line two.";
        boolean[] analyzetext_settings = new boolean[6]; /* create array of booleans to store settings for the "AnalyzeText" function */
        boolean file_loaded = LoadSettings(analyzetext_settings);
        if(!(file_loaded))
            DefaultSettings(analyzetext_settings);
        AnalyzeText(text, analyzetext_settings);
        text = AddPrefixSuffix(text, "Prefix", "Suffix");
        Println(text);
        boolean[] success = new boolean[1]; /* this can be used in functions to return true or false */
        text = ReadFromFile("TextManipulator_Test", text, success);
        if(success[0]) {
            //Println(text);
            //AnalyzeText(text, analyzetext_settings);
            //text = AddPrefixSuffix(text, "Prefix", "Suffix");
            //Println(text);
            //text = RemoveDuplicateLines(text);
            //Println(text);
            //text = RemoveLinesContaining(text, "file");
            //Println(text);
            //text = SortLinesAlphabetically(text);
            //Println(text);
            text = FindReplace(text, "file", "replaced");
            Println(text);
            //text = SortLinesBySize(text);
            //Println(text);
        }
    }

    /* runs each sub-function user has chosen under "AnayzeText" function settings */
    public static void AnalyzeText(String text, boolean analyzetext_settings[]) {
        if (analyzetext_settings[0])
            Println("Text has " + WordCount(text) + " words.");
        if (analyzetext_settings[1])
            Println("Text has " + CharCount(text) + " characters.");
        if (analyzetext_settings[2])
            Println("Text has " + LineCount(text) + " lines.");
        if (analyzetext_settings[3])
            Println("Text has " + SentenceCount(text) + " sentences.");
        if (analyzetext_settings[4])
            WordFrequency(text);
        if (analyzetext_settings[5])
            CharFrequency(text);
    }
    /* initializes all variables with default settings and creates the "TextManipulator_Settings" file */
    public static void DefaultSettings(boolean analyzetext_settings[]) {
        try {
            FileWriter file = new FileWriter("TextManipulator_Settings");
            BufferedWriter write_settings = new BufferedWriter(file);
            write_settings.write("#Line 1: AnalyzeText Settings: WordCount, CharCount, LineCount, SentenceCount, WordFrequency, CharFrequency\n");
            write_settings.write("1,1,1,1,1,1\n"); /* sets values on file to true by default */
            write_settings.close();
        } catch (IOException e) {
            Print("Error writing default settings file\n");
        }
        for(int i = 0; i < 6; i++)
            analyzetext_settings[i] = true; /* set all values to true by default */
    }

    public static boolean LoadSettings(boolean analyzetext_settings[]) {
        boolean load = true;
        try {
            FileReader file = new FileReader("TextManipulator_Settings");
            BufferedReader read_settings = new BufferedReader(file);
            String line = "";
            int line_counter = 1;
            while((line = read_settings.readLine()) != null) {
                if(line_counter == 1) {/* line 1: load settings for AnalyzeText */
                    /* line is "1,1,1,1,1,1" so we can read it in easily. Each value is parsed from String to boolean for easy use */
                    analyzetext_settings[0] = CharToBoolean(line.charAt(0));
                    analyzetext_settings[1] = CharToBoolean(line.charAt(2));
                    analyzetext_settings[2] = CharToBoolean(line.charAt(4));
                    analyzetext_settings[3] = CharToBoolean(line.charAt(6));
                    analyzetext_settings[4] = CharToBoolean(line.charAt(8));
                    analyzetext_settings[5] = CharToBoolean(line.charAt(10));
                }
                line_counter++;
            }
        } catch (IOException e) {
            Print("Error reading settings file\n");
            load = false;
        }
        return load; /* returns whether "TextManipulator_Settings" was accessed and read */
    }
    /* updates "TextManipulator_Settings" with new values from program - will be run every time the user changes settings */
    public static boolean UpdateSettings(boolean[] analyzetext_settings) {
        boolean success = true;
        try {
            FileWriter file = new FileWriter("TextManipulator_Settings");
            BufferedWriter write_settings = new BufferedWriter(file);
            /* write settings to file (in the correct order), first converting each value to a char and comma-separating them */
            write_settings.write(BooleanToChar(analyzetext_settings[0]) + "," + BooleanToChar(analyzetext_settings[1]) +
                    "," + BooleanToChar(analyzetext_settings[2]) + "," + BooleanToChar(analyzetext_settings[3]) + "," +
                    BooleanToChar(analyzetext_settings[4]) + "," + BooleanToChar(analyzetext_settings[5]));
            write_settings.newLine();
            write_settings.close();
        } catch(IOException e) {
            Print("Error writing to file\n");
            success = false;
        }
        return success;
    }
    public static String ReadFromFile(String file_name, String text, boolean[] success) {
        text = ""; /* empty variable text */
        try {
            success[0] = true;
            FileReader file = new FileReader(file_name);
            BufferedReader read_file = new BufferedReader(file);
            String line = "";
            while((line = read_file.readLine()) != null) {
                text = text + line + "\n"; /* need to include a newline, otherwise everything will be made into one line */
            }
        } catch(IOException e) {
            Println("Error reading file \"" + file_name + "\"");
            success[0] = false;
        }
        return text;
    }
    /* returns false if '0', true if anything else. Used for transferring variables from "TextManipulator_Settings to
     * the program */
    public static boolean CharToBoolean(char c) {
        if(c == '0')
            return false;
        else
            return true;
    }
    /* returns '0' if false, '1' if true. Used for transferring variables from program to "TextManipulator_Settings" */
    public static char BooleanToChar(boolean b) {
        if(b == false)
            return '0';
        else
            return '1';
    }

    public static int CharCount(String text) {
        int char_count = text.replace("\n", "").length();
        return char_count;
    }

    public static int WordCount(String text) {
        int word_count = text.length()
                - text.replace(" ", "").replace("\n", "").length() + 1;
        return word_count;
    }

    public static int LineCount(String text) {
        int line_count = text.length() - text.replace("\n", "").length() + 1; /// needs to be tested and possibly corrected
        return line_count;
    }

    public static int SentenceCount(String text) { /// should count 1 sentence if there is no period
        int sentence_count = text.length()
                - text.replace(".", "").replace("?", "").replace("!", "")
                .length();
        return sentence_count;
    }

    public static void WordFrequency(String text) {

    }

    public static void CharFrequency(String text) {

    }
    /* adds prefix and suffix to each line */
    public static String AddPrefixSuffix(String text, String prefix, String suffix) {
        //String delims = "[\\r\\n]+"; /* splits text into separate lines */
        //String[] lines = text.split(delims); /* create an array that holds each individual line */
        String[] lines = text.split("\\r?\\n"); /* create an array that holds each individual line */
        text = ""; /* clear variable once it has been split into lines*/
        for(int i = 0; i < lines.length; i++)
            text = text + prefix + lines[i] + suffix + "\n"; /* add each line to text with prefix and suffix */
        return text;
    }
    public static String RemoveDuplicateLines(String text) { /// a little messy, but works. Feel free to refactor
        Vector<Integer> duplicates = new Vector<Integer> (0, 1);
        String[] lines = text.split("\\r?\\n"); /* create an array that holds each individual line */
        text = ""; /* clear variable once it has been split into lines*/
        for(int i = 0; i < lines.length; i++) {
            for(int j = i + 1; j < lines.length; j++) { /* check to see if any of the later elements match */
                Println("lines[" + i + "] = " + lines[i] + " and lines[" + j + "] = " + lines[j]);
                if(lines[j].equals(lines[i])) {/* duplicate found */
                    Println("Duplicate found. Element " + j + " = Element " + i);
                    duplicates.addElement(j); /* add element position to vector */
                }
            }
        }
        Vector<String> new_lines = new Vector<String> (0,1); /* vector to hold the non-duplicate lines */
        for(int i = 0; i < lines.length; i++) {
            boolean copy_element = true; /* true if element is not a duplicate */
            for(int j = 0; j < duplicates.size(); j++) {
                if(i == duplicates.get(j))
                    copy_element = false;
            }
            if(copy_element)
                new_lines.addElement(lines[i]);
        }
        for(int i = 0; i < new_lines.size(); i++)
            text = text + new_lines.get(i) + "\n";
        return text;
    }
    public static String RemoveLinesContaining(String text, String remove) {
        String[] lines = text.split("\\r?\\n"); /* create an array that holds each individual line */
        text = ""; /* clear variable once it has been split into lines*/
        for(int i = 0; i < lines.length; i++) { /* for each line... */
            if(lines[i].indexOf(remove) < 0) /* could not find String remove in line */
                text = text + lines[i] + "\n";
        }
        return text;
    }
    public static String ScrambleLines(String text) { /// still working on this, feel free to help
        String[] lines = text.split("\\r?\\n"); /* create an array that holds each individual line */
        text = ""; /* clear variable once it has been split into lines*/

        return text;
    }
    public static String SortLinesAlphabetically(String text) {
        String[] lines = text.split("\\r?\\n"); /* create an array that holds each individual line */
        text = ""; /* clear variable once it has been split into lines*/
        Arrays.sort(lines);
        for(int i = 0; i < lines.length; i++)
            text = text + lines[i] + "\n";
        return text;
    }
    public static String SortLinesBySize(String text) { /// still working on this, doesn't work yet, feel free to help
        String[] lines = text.split("\\r?\\n"); /* create an array that holds each individual line */
        text = ""; /* clear variable once it has been split into lines*/
        for(int i = 0; i < lines.length; i++) {
            for(int j = i + 1; j < lines.length; j++) {
                if(lines[j].length() < lines[i].length()) {
                    String copy = lines[i];
                    lines[i] = lines[j];
                    lines[j] = copy;
                }
            }
        }
        for(int i = 0; i < lines.length; i++)
            text = text + lines[i] + "\n";
        return text;
    }
    public static String FindReplace(String text, String find, String replace) { /// just the basic algorithm for now
        int instances = 0;
        while(text.indexOf(find) > -1) { /* runs until String find is no longer found */
            text = text.substring(0, text.indexOf(find)) + replace + text.substring(text.indexOf(find) + find.length(), text.length());
            instances++;
        }
        Println(instances + " instances of \"" + find + "\" replaced."); /// we can remove this counter later
        return text;
    }
    public static void Print(String s) { System.out.print(s); }
    public static void Println(String s) { System.out.println(s); }
}
